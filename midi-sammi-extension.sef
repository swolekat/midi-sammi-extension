[extension_name]
Midi Sammi Extension

[extension_info]
version 0.0.5 by Swolekat
[insert_external]

[insert_command]

startListeningToMidi();
[insert_hook]

[insert_script]
        let midi;
        let showDebugMessages = 0;
        let velocityThreshold = 0;

        const numberToNoteArray = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];

        const updateSettingVariables = async () => {
            const newShowDebugMessages = await SAMMI.getVariable('debug', 'midiVariables');
            const newVelocityThreshold = await SAMMI.getVariable('velocityThreshold', 'midiVariables');
            showDebugMessages = newShowDebugMessages.Value;
            velocityThreshold = newVelocityThreshold.Value;
        };

        const numberToNoteValue = (number) => {
            const numberMinusOctave = number % 12;
            const octave = Math.floor(number/12) - 1;
            const note = numberToNoteArray[numberMinusOctave];
            return `${note}${octave}`;
        };

        function onMIDIMessage(event) {
            const [command, note, velocity] = event.data;
            const humanReadableNote = numberToNoteValue(note);
            if(showDebugMessages){
                console.log(`MIDI info: command-> ${command} note->${humanReadableNote} velocity->${velocity}`);
            }
            const hasVelocity = velocity > velocityThreshold;
            if(command === 144 && hasVelocity){
                SAMMI.triggerExt('Midi Note On', {note: humanReadableNote, velocity});
                SAMMI.triggerExt(`Midi Note On ${humanReadableNote}`, {note: humanReadableNote, velocity});
            }
            if(command === 128 || velocity === 0){
                SAMMI.triggerExt('Midi Note Off', {note: humanReadableNote, velocity});
                SAMMI.triggerExt(`Midi Note Off ${humanReadableNote}`, {note: humanReadableNote, velocity});
            }
        }


        function onMIDIInit(midiAccess) {
            midi = midiAccess;
            midiAccess.inputs.forEach((input) => {
                input.onmidimessage = onMIDIMessage;
            })
        }

        function onMIDISystemError(e) {
            console.log(e.message);
        }

        function startListeningToMidi(){
            navigator.requestMIDIAccess().then(
                onMIDIInit,
                onMIDISystemError );
            updateSettingVariables();
            setInterval(updateSettingVariables, 10000);
        }

[insert_over]
{ "deck_data": "{ \"background_color\": 4210752.0, \"on\": true, \"grid_y\": 10.0, \"snap_grid\": true, \"lb_version\": \"2023.3.1\", \"background_image\": \"\", \"sammi_version\": \"2023.3.1\", \"adaptive_resizing\": true, \"unique_id\": \"20240101143428613670867\", \"button_list\": [ { \"color\": 12632256.0, \"persistent\": true, \"text\": \"midiVariables\", \"release_duration\": 0.0, \"queueable\": false, \"command_list\": [ { \"b1\": \"=\", \"b3\": \"midiVariables\", \"cmd\": 160.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": true, \"ms\": 0.0, \"sel\": false, \"dis\": false, \"xpan\": 0.0, \"b0\": \"velocityThreshold\", \"b2\": \"0\" }, { \"b1\": \"=\", \"b3\": \"midiVariables\", \"cmd\": 160.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": true, \"ms\": 0.0, \"sel\": false, \"dis\": false, \"xpan\": 0.0, \"b0\": \"debug\", \"b2\": \"0\" } ], \"press_type\": 0.0, \"x\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ { \"group_id\": \"\", \"type\": \"SAMMI Startup\", \"button_id\": \"midiVariables\", \"trg\": 10.0 } ], \"group_id\": \"\", \"overlappable\": false, \"init_variable\": \"\", \"deck\": 0.0, \"width\": 0.10000000000000000555111512312578, \"button_id\": \"midiVariables\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.10000000000000000555111512312578, \"release_list\": [ ], \"functions\": 81.0, \"stretch\": false }, { \"color\": 12632256.0, \"persistent\": true, \"text\": \"example\", \"release_duration\": 0.0, \"queueable\": false, \"command_list\": [ { \"b1\": \"note\", \"cmd\": 66.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": true, \"ms\": 0.0, \"sel\": false, \"dis\": 1.0, \"xpan\": 0.0, \"b0\": \"note\" }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": true, \"ms\": 0.0, \"sel\": false, \"dis\": 1.0, \"xpan\": 0.0, \"b0\": \"\\\/$note$\\\/ off\" } ], \"press_type\": 0.0, \"x\": 0.90000000000000002220446049250313, \"border\": 2.0, \"image\": \"\", \"triggers\": [ { \"case_sensitive\": false, \"message\": \"Midi Note Off\", \"group_id\": \"\", \"button_id\": \"midiExample\", \"trg\": 12.0, \"allow_empty_wildcard\": false } ], \"group_id\": \"\", \"overlappable\": false, \"init_variable\": \"\", \"deck\": 0.0, \"width\": 0.10000000000000000555111512312578, \"button_id\": \"midiExample\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.10000000000000000555111512312578, \"release_list\": [ ], \"functions\": 81.0, \"stretch\": false } ], \"deck_name\": \"Midi Extension\", \"grid_x\": 10.0, \"stretch\": false }", "unique_id": "20240101143428613670867", "deck_verification_code": "1842166336748aac3734414293a3c3fef3b5448c", "include_image": { } }
